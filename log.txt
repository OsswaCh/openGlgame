\documentclass[a4paper, 12pt]{article}
\usepackage[utf8]{inputenc} % Encoding
\usepackage{graphicx} % For including images
\usepackage{titlesec} % For customizing section titles
\usepackage{geometry} % For adjusting page margins
\usepackage{hyperref} % For hyperlinks

\geometry{
    top=2.5cm,
    bottom=2.5cm,
    left=2.5cm,
    right=2.5cm,
    headheight=15pt,
    includeheadfoot
}

\pagestyle{fancy}
\fancyhf{}
\rhead{\thepage}
\lhead{\textit{OpenGLGame Report}}
\renewcommand{\headrulewidth}{1pt}

\titleformat{\section}{\normalfont\Large\bfseries}{\thesection}{1em}{}
\title{OpenGLGame Report}

\begin{document}
\maketitle
\tableofcontents
\newpage



\subtitle{Headers}assert.h is a header file in the C programming language that provides the assert macro used for debugging and error checking during program development. It's used to verify assumptions made in the program's logic and halt the program's execution if an assertion fails.//windows.h is a header file in the Microsoft Windows operating system environment that contains declarations, definitions, and function prototypes for the Windows API (Application Programming Interface).
\subtitle{Notes about the code}

wc.cbSize = sizeof(WNDCLASSEX);

This line sets the cbSize member of the WNDCLASSEX structure (wc) to the size of the WNDCLASSEX structure itself. The cbSize member specifies the size, in bytes, of the WNDCLASSEX structure. By assigning it the value returned by sizeof(WNDCLASSEX), you ensure that the WNDCLASSEX structure is correctly sized and compatible with the Windows API functions that use this structure. It helps the Windows operating system identify the version of the structure being used, enabling proper interaction with the system.

wc.lpszClassName = L"OG3DWindow";

The lpszClassName member of the WNDCLASSEX structure (wc) is where you specify the unique name by which the window class will be known. This member holds a pointer (of type LPCWSTR when using L before the string literal) to a null-terminated string that serves as the identifier for the window class. The specified class name is used when creating windows of this class, allowing the system to identify and associate windows with the appropriate class attributes and behavior.

wc.lpfnWndProc = DefWindowProc;The lpfnWndProc member of the WNDCLASSEX structure (wc) is a function pointer that represents the address of the window procedure associated with this window class. The window procedure (WndProc) is a callback function responsible for processing messages sent to windows of this class. In this line, DefWindowProc is a default window procedure provided by the Windows API. When lpfnWndProc is set to DefWindowProc, it signifies that the default window procedure should be used for handling messages not explicitly handled by a custom window procedure. DefWindowProc provides default message processing behavior for various messages and ensures proper handling of unhandled messages.


void OGame::run() :


PeekMessage(&msg, NULL, NULL, NULL, PM_REMOVE)
PeekMessage checks the message queue for a pending message that corresponds to the specified criteria.
The PM_REMOVE flag indicates that the message should be removed from the queue after being retrieved.
If a message exists in the queue, PeekMessage returns a non-zero value (true), otherwise, it returns zero (false).
If a message is found and removed (PM_REMOVE), it's stored in the msg structure.

TranslateMessage(&msg);
is specifically designed to handle messages related to keyboard input, converting virtual-key messages into character messages

DispatchMessage(&msg);
dispatches the retrieved message to the appropriate window procedure for further processing.
The window procedure is responsible for handling various types of messages, such as user input, system notifications, and other events, and taking appropriate actions based on the message received.


LRESULT CALLBACK WndProc function: 
    The WndProc function is associated with a window class and is called automatically by the operating system in response to window messages that the window class receives.
   
   
    LRESULT CALLBACK WndProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam):
    LRESULT is the return type, indicating the result of message processing.
    CALLBACK specifies the calling convention for the function.
    WndProc is the name of the function.
    HWND hwnd is the handle to the window the message is directed to.
    UINT msg is the message code indicating the type of message received.
    WPARAM wParam and LPARAM lParam are additional parameters accompanying the message.



    The switch statement within the function is used to handle different types of messages (msg) sent to the window:
    case WM_DESTROY:: This case is executed when the window receives a WM_DESTROY message, which occurs when the window is being destroyed. In this case:
    GetWindowLongPtr(hwnd, GWLP_USERDATA) retrieves the OWindow* pointer stored as user data associated with the window (hwnd).
    case WM_CLOSE:: This case is executed when the window receives a WM_CLOSE message, which is typically triggered when the user attempts to close the window (e.g., by clicking the close button on the window). In this case:
    PostQuitMessage(0) posts a quit message to the application's message queue, indicating that the application should terminate. This message will be picked up by the application's message loop, causing it to exit.




smart pointers:
    #include <memory>
    std::unique_ptr<OWindow> m_window;
    m_window = std::unique_ptr<OWindow>(new OWindow());

        - they manage the memory of dynamically allocated objects in a safer and more convenient way compared to raw pointers. They help prevent memory leaks and undefined behavior caused by manual memory management.
        - There are three main types of smart pointers in C++:
            1) unique_ptr: This pointer "owns" the object it points to. Only one unique_ptr can point to a particular object. When the unique_ptr goes out of scope or is explicitly reset, it automatically deallocates the memory for the object it owns.
            2) std::shared_ptr: This pointer allows multiple pointers to share ownership of an object. It keeps track of the number of shared_ptr instances pointing to the same object. When the last shared_ptr pointing to the object goes out of scope or is reset, it deallocates the memory.
            3) std::weak_ptr: This pointer is used in conjunction with std::shared_ptr to break potential cyclic references. It allows you to observe an object without affecting its lifetime. It doesn't contribute to the reference count of the object and can be converted to shared_ptr when needed.

